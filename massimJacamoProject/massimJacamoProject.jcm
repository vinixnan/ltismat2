/* 

    JaCaMo Project File 
    
    This file defines the initial state of the MAS (initial agents, environment, organisation, ....)
    
    (see below the documentation about what can be defined in this file)

*/

mas massimJacamoProject {

    //agent leader
    agent vehicle1 : vehicle.asl { 
    	focus: city.a1view
    }
     agent vehicle2 : vehicle.asl { 
    	focus: city.a2view
    }
    agent vehicle3 : vehicle.asl { 
    	focus: city.a3view
    }
    agent vehicle4 : vehicle.asl { 
    	focus: city.a4view
    }
    agent vehicle5 : explorer.asl { 
    	focus: city.a5view
    }
    agent vehicle6 : explorer.asl { 
    	focus: city.a6view
    }
    agent vehicle7 : explorer.asl { 
    	focus: city.a7view
    }
    agent vehicle8 : explorer.asl { 
    	focus: city.a8view
    }
    agent vehicle9 : vehicle.asl { 
    	focus: city.a9view
    }
    agent vehicle10 : vehicle.asl { 
    	focus: city.a10view
    }
    agent vehicle11 : vehicle.asl { 
    	focus: city.a11view
    }
    agent vehicle12 : vehicle.asl { 
    	focus: city.a12view
    }
    agent vehicle13 : vehicle.asl { 
    	focus: city.a13view
    }
    agent vehicle14 : vehicle.asl { 
    	focus: city.a14view
    }
    agent vehicle15 : vehicle.asl { 
    	focus: city.a15view
    }
    agent vehicle16 : vehicle.asl { 
    	focus: city.a16view
    }
    
/* 
   agent definition

      <agent>     ::= agent <name> [ : <source> ] { <parameter>* }
      <parameter> ::= <id> : <value> ( (, | EOL) <value> ) *
       
   e.g.
      agent bob : participant.asl {                    // if source is omitted, bob.asl will be used
         beliefs:     p("this is a condition",15000)   // initial beliefs
                      friend(alice)
         goals:       start, go(home)                  // initial goals

         debug:       mindinspector(gui(2000,html,history)) // starts the mind inspector for the agent  (details at http://jason.sourceforge.net/faq/faq.html -- How to log agents' mind states?)
         verbose:     2                                // 0 means only agent output, 1 means agent+jason output, 2 means agent+jason+debug output
         
         ag-class:    tt.MyAgClass                     // if omitted, Jason Agent default class will be used
         ag-arch:     myp.myArch1
                      mypkg.MyCustomAgArch             // CArtAgO arch is automatically included, if necessary, JADE arch is automatically included
         ag-bb-class: my.Bb

         
         myparameter: "this is an appl paramter"       // user application parameter, used for instance by user custom architectures
         
         node:        n1                               // the logical name of the place where the agent will run
         instances:   5                                // 5 bobs (called bob1, bob2, ... bob5) will be created. 
                                                       // You can also list the names of the agents. Default value is 1.
         join:        w2                               // join the workspace w2
         focus:       w1.a1 @ n1                       // focus on artifact a1 in workspace w1 running on node n1
         roles:       r1 in g2, r2 in o1.g3            // adopt the role r1 in group g2 and role r2 in group g3 (in org o1)
      }
      
      agent alice                                      // the source is alice.asl, one instance will be created at default node
*/

workspace city {
        // each agent has its own artifact to interface with the Mining Planet scenario
        // first parameter is the id of the scenario
        // second parameter is the id of the agent in the scenario
        artifact a1view: massimJacamoProject.CityWorld("a1")
        artifact a2view: massimJacamoProject.CityWorld("a2")
        artifact a3view: massimJacamoProject.CityWorld("a3")
        artifact a4view: massimJacamoProject.CityWorld("a4")
        artifact a5view: massimJacamoProject.CityWorld("a5")
        artifact a6view: massimJacamoProject.CityWorld("a6")
        artifact a7view: massimJacamoProject.CityWorld("a7")
        artifact a8view: massimJacamoProject.CityWorld("a8")
        artifact a9view: massimJacamoProject.CityWorld("a9")
        artifact a10view: massimJacamoProject.CityWorld("a10")
        artifact a11view: massimJacamoProject.CityWorld("a11")
        artifact a12view: massimJacamoProject.CityWorld("a12")
        artifact a13view: massimJacamoProject.CityWorld("a13")
        artifact a14view: massimJacamoProject.CityWorld("a14")
        artifact a15view: massimJacamoProject.CityWorld("a15")
        artifact a16view: massimJacamoProject.CityWorld("a16")
        
    }
/*
    environment definition
    
       <environment> ::= <workspace>*
       <workspace>   ::= workspace <name> { <artifact>* <agents> <node> <debug> }
       <artifact>    ::= artifact  <name> : <type> [ { focused-by: <agents> } ]
       <agents>      ::= agents : <name> ( (, | EOL) <name> )* | "*"   // "*" means all agents
       <node>        ::= node :   <name> EOL
       <debug>       ::= debug
       
    e.g.
       workspace w1 {
          artifact c1: mylib.Counter(10)               // creates an artifact named c1 as an instance of mylib.Counter initialised with (10) 
          artifact bll: mylist.BlackList() 
          node: n2                                     // this workspace will run on node n2
          debug                                        // starts a GUI for this workspace
       }
*/

/*
    organisation entity definition
    
       <organisations> ::= <org>*
       <org>           ::= organisation <name> [ : <source> ] { <parameter>* <agents> <node> <group>* <scheme>* }
       <group>         ::= group  <name> : <type> [ { <parameter>* } ] 
       <scheme>        ::= scheme <name> : <type> [ { <parameter>* } ] 
       
    e.g.
       organisation o1 : os.xml {                      // os.xml is the file with the organisational specification, if omitted o1.xml is used
          group g1: writepaper {                       // creates a group instance named g1 based on the group definition identified by writepaper (defined in the o1.xml file)
             responsible-for: s1                       // the group will be responsible for the scheme s1
             owner: alice
             debug                                     // starts a GUI for this group
             
             group sg2 : t1                            // groups sg2 will be a sub-group of g1          
          }             
          group g2 : writepaper                        // another group (without particular initialisation) 
          
          scheme s1 : wpscheme                         // instance of scheme identified by wpscheme (in o1.xml)  
       }
*/


    // java class path
    /* e.g.
         class-path:  lib
    */
   
    // agent source path
    asl-path: src/agt
              src/agt/inc

    /* platform configuration
       e.g.
         platform: jade() 
                   cartago("infrastructure") 
                   centralised(pool,4)

       parameters for cartago                   
           - "infrastructure" (optional): starts the cartago node in the network
           
       parameters for centralised
           - pool,X : where X is the number os threads used to run the agents
            
       parameters for jade: any parameter we can use for jade.Boot. E.g.:
           - jade("-gui -sniffer"): starts jade main-container with RMA and Sniffer already running
           - jade("-container -host localhost -container-name c2"): starts a jade sub-container named c2
    */
   
    
    
    /* node configuration
       e.g.
         node n3 running @ x.com.fr
         
       nodes not defined will be launched when this .jcm is run
    */
}

